<?php
/**
 * В файле /vendor/techart/bxapp/lib/RouterProccessing.php, на который пересылает htaccess все роуты.
 * Данный файл подключается первым.
 * А значит он подключается до ядра битрикса и тут можно переопределять константы.
 * Например, чтобы повысить производительность или изменить работу сессий.
 */


// _________ КОНСТАНТЫ BXAPP

/**
 * Если равно true, то в BxApp включается работа с виртуальной сессией битрикса
 *
 * Если в битриксе используется виртуальная сессия, то файл сессии не создаётся, заголовок Set-Cookie не посылается
 * Но при этом сама сессия создаётся, битрикс пишет туда данные, можно записать самому в массив $_SESSION, так же
 * session_status() = 2 а session_id() возвращает ИД. Но!
 * Всё это хранится в памяти и ни куда не сохраняется, ИД каждый раз разный.
 *
 * Если с сайта будет посылаться кука PHPSESSID когда в битриксе включена виртуальная сессия, то:
 * - сессия по PHPSESSID НЕ ПОДНИМАЕТСЯ, даже если файл сессии существует
 * - создаётся новая виртуальная сессия (как она работает описано выше)
 *
 * В BxApp (если TBA_USE_BX_SECURITY_SESSION_VIRTUAL === true):
 *
 * 1) Если заголовок HTTP_REQUEST_TYPE = 'secure', то константа TBA_REQUEST_TYPE = 'secure' и используется обычная сессия
 *
 * 2) Если заголовка HTTP_REQUEST_TYPE нет или HTTP_REQUEST_TYPE != 'secure', то это public запрос. Поэтому:
 * константа TBA_REQUEST_TYPE = 'public' и включается виртуальная сессия битрикса
 *
 * 3) Если заголовка HTTP_REQUEST_TYPE нет или HTTP_REQUEST_TYPE != 'secure' и при этом передаётся PHPSESSID. То:
 * константа TBA_REQUEST_TYPE = 'mixed' и включается виртуальная сессия битрикса
 */
//if (strpos($_SERVER['HTTP_REFERER'], '/bitrix/') === false) {
// 	define('TBA_USE_BX_SECURITY_SESSION_VIRTUAL', true);
// }



// _________ КОНСТАНТЫ БИТРИКСА

/**
 * Если в настройках битрикса включена смена идентификатора сессий,
 * эта константа позволит работать обмену с 1С
 */
// define('BX_SESSION_ID_CHANGE', false);

/**
 * При установке в true отключает выполнение всех агентов (если они на хите работают)
 */
// define('NO_AGENT_CHECK', true);

/**
 * Если инициализировать данную константу каким либо значением,
 * то это запретит сбор статистики на данной странице.
 */
// define('NO_KEEP_STATISTIC', true);

/**
 * Инициализация этой константы каким-либо значением
 * приведет к запрету следующих действий модуля "Статистика",
 * выполняемых ежедневно при помощи технологии агентов:
 * 1) перевод на новый день;
 * 2) очистка устаревших данных статистики;
 * 3) отсылка ежедневного статистического отчета.
 */
// define('NO_AGENT_STATISTIC', true);

/**
 * Запрет реакции на служебные параметры в URL (анализ быстродействия и пр.).
 * Например, при включенной битриксовой отладке перестанут
 * в AJAX-ответы подмешиваться сообщения о метриках (что ломает JSON и т.п.).
 */
// define('PUBLIC_AJAX_MODE', true);

/**
 * Запрет обработки отправки писем на хите. Если это установить,
 * то отправка писем должна работать по cron, -
 * если cron не настроить, то письма вообще не будут уходить!
 */
// define('DisableEventsCheck', true);

/**
 * Отключить функционал блокировки посетителей по превышению лимита активности
 */
// define('STATISTIC_SKIP_ACTIVITY_CHECK', true);

/**
 * Константа предназначена для отключения автоматического сбора статистики,
 * реализованного как вызов функции CStatistics::Keep
 * в качестве обработчика события OnBeforeProlog.
 */
// define('STOP_STATISTICS', true);

/**
 * Если определить константу, то сообщения модуля безопасности будут
 * не через AJAX (возвращается JavaScript),
 * а через простой текст (echo)
 */
// define('BX_SECURITY_SHOW_MESSAGE', true);

/**
 * Если инициализировать данную константу значением "true" до подключения пролога,
 * то это отключит проверку прав на доступ к файлам и каталогам.
 */
// define('NOT_CHECK_PERMISSIONS', true);

/**
 * Отключает интеграцию с Битрикс24
 */
// define('B24CONNECTOR_SKIP', true);

/**
 * При установке константы в true не используется монитор производительности.
 */
// define('PERFMON_STOP', true);
